<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" type="text/css" href="css/formatteddataset.css">
<title>SQL Details Help</title>
</head>
<body>

<h2>SQL Details Help</h2>

<h3>1) SQL Details Column Descriptions</h3> 
<blockquote>Each row in this report represents a recent query and associated information.  By default the report is sorted
with the most recent queries showing at the top
</blockquote>
<ul>
<li>ID - An increasing integer that indicates the number of the query since the server was last booted.
<li>StartTime - The time the query started
<li>ExecutionTime - The time in milliseconds that the query took to run. 
<li>StatementReuse - Indicates how many times the PreparedStatement was reused.  This value should be high to maximize
the benefit of the PreparedStatement.   The first time the PreparedStatement is used it will have a value of 0 and 
will increase with each reuse of the PreparedStatement.  Statements will always have a value of 0 here as they aren't
reused.
<li>SQL - The query that executed.  For statements it will include the parameter values.  PreparedStatements will have
'?' in place of values.
<li>ExceptionStackTrace - If an error happened when executing the query this column will contain the stack trace.  If no
error occurred it will be empty.
<li>MethodName - The JDBC method name that executed the query.
</ul>


<h3>2) SQL Detail Action</h3> 

<ul>
<li>Refresh - Use current form settings to retrieve SQL detail data
<li>Reset - Erases/Removes all rows from the SQL Detail buffer
<li>Enable - Enable SQL Detail monitoring.  If already enabled this has no effect. 
<li>Disable - Disable SQL Detail monitoring.  If monitors are already disabled this has no effect.
</ul>

<h3>3) Output</h3>
<blockquote>Determines the output format for the SQL detail buffer.  Options for output are HTML, XML, and an MS Excel spreadsheet. 
HTML is the default.</blockquote>


<h3>4) Set Buffer Size (optional)</h3>
<blockquote>Resizes the number of rows that are kept in the rolling SQL detail buffer.  Any current rows remain in the buffer.  JAMon does not have a 
limitation on the buffer size, so if you would like a larger buffer size then is available in the list you may edit
the jsp and add the value.
</blockquote>
<ul>
<li>No Action - No Action indicates that the page request will not alter the buffer
<li>100 rows - 100 SQL statements will fit in the buffer
<li>250 rows - 250 SQL statements will fit in the buffer
<li>500 rows - 500 SQL statements will fit in the buffer
<li>1000 rows - 1000 SQL statements will fit in the buffer
</ul



<h3>5) Text Display Length (optional)</h3>
<blockquote>In some cases labels (SQL statements) can become quite large and make the report difficult to read.  By entering an integer in this field
the display of the label column will be truncated to the specified length.  Note this only affects the display and the actual data in the report is not altered.  
</blockquote>


<h3>6) Highlight (optional)</h3>
<blockquote>Any text that is entered here and appears in the label column will be hightlighted
</blockquote>


<h3>7) Filter (optional)</h3>
<blockquote>Filter leverages the com.fdsapi.ArraySQL class to query the JAMon data with a SQL like syntax.  
<ul>
<li>If you specify any string within the filter (something like:  com), the string will be used in a Regular Expression to
find any monitors with the given pattern in their label.   This allows you to search for monitors of interest.  Note:  A regular expression is used,
not the more typical SQL 'like' clause (i.e. '%com%').  Also the regular expressions are case insensitive.
<li>You can also enter a full ArraySQL syntax and do more complex queries on any of the JAMon columns.  
Note Strings should be surrounded by single quotes not double quotes. You can use the reports column names as part of 
your query. Examples follow:
<ul>
<li>select * from array where label like 'pageHit' or label like 'mypackage'
<li>select * from array where hits>500
<li>select * from array where label like 'pageHit' or (label like 'mypackage' and hits>500 and total>100000)
<li>select * from array where label in ('bytessent', 'bytesreceived')
<li>Or you can just put in the where clause:  where hits>500
</ul>
</ul>
</blockquote>

<h3>8) Links</h3>
<blockquote>Links to various classes from FormattedDataSet API that were used in creating this page.
<ul>
<li><a href="http://fdsapi.sourceforge.net/javadocs/com/fdsapi/FormattedDataSet.html" target="_blank">FormattedDataSet</a> - Used to generate
dynamic text
<li><a href="http://fdsapi.sourceforge.net/javadocs/com/fdsapi/arrays/ArrayConverter.html" target="_blank">ArrayConverter</a> - Used to format JAMon
statistics for display.
<li><a href="http://fdsapi.sourceforge.net/javadocs/com/fdsapi/arrays/ArraySQL.html" target="_blank">ArraySQL</a> - Used to query Object arrays 
(Object[][]) that can contain any datatype. 
</ul>
</blockquote>

<center><a href="javascript:window.close();">Close</a><br></center>

</body>
</html>
