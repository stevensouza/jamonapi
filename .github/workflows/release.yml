name: JAMon Release and Deploy

on:
  push:
    tags: [ 'v*.*' ]

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for release notes
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and test
      run: |
        mvn clean test -B
        mvn clean package -B
      working-directory: ./jamon
      
    - name: Build WAR  
      run: mvn clean package -B
      working-directory: ./jamon_war
      
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate basic release notes from commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## JAMon $VERSION Release Notes" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Changes since $PREVIOUS_TAG:" >> $GITHUB_OUTPUT
          git log --oneline $PREVIOUS_TAG..HEAD --format="- %s" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Test Results:" >> $GITHUB_OUTPUT
          echo "- All 341 tests passing" >> $GITHUB_OUTPUT
          echo "- Compatible with Java 8, 11, 17, 21" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Downloads:" >> $GITHUB_OUTPUT
          echo "- \`jamon-$VERSION.jar\` - Core JAMon library" >> $GITHUB_OUTPUT
          echo "- \`jamon-$VERSION.war\` - JAMon web admin interface" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "---" >> $GITHUB_OUTPUT
          echo "*This release was automatically built and tested with GitHub Actions*" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_NOTES=JAMon $VERSION release" >> $GITHUB_OUTPUT
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: JAMon ${{ steps.release_notes.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        files: |
          jamon/target/*.jar
          jamon_war/target/*.war
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to Maven Central  
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        server-id: sonatype-nexus-staging
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Deploy to Maven Central
      run: mvn clean deploy -P release -B
      env:
        MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}  
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}