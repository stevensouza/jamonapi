# jamon properties that allow for configuration of how jamon will run. http://www.jamonampi.com
# The file should be put in your applications classpath.  That location will vary depending on what software container
# you are working with.
#
# For tomcat8 both the jamon jar, hazelcast.xml and this file were placed in:
#   ...apache-tomcat-8.0.8/lib/jamonapi.properties
# For jetty9
#  ...jetty-distribution-9.2.1.v20140609/resources/jamonapi.properties
#
# Note: pathnames need to be escaped: path=c:\\docs\\doc1
#  Note: command line properties take precedence over anything in this file.
#   Example:  -DdistributedDataRefreshRateInMinutes=2 -DjamonDataPersister=com.steve.MyPersister
#   Jetty Example: java -DdistributedDataRefreshRateInMinutes=1 -jar start.jar OPTIONS=All

# Indicates how often should jamon trigger the save event in minutes
distributedDataRefreshRateInMinutes=5

# Class that initiates saving of MonitorComposite (serializable).
# The class must implement com.jamonapi.distributed.JamonDataPersister
#
# Note the default is HazelcastFilePersister.  Its behavior is to use HazelCast if it is in the classpath
# and to save local jamon results to a file.  If HazelCast is not in the class path then LocalJamonFilePersister
# is used (saving local jamon results to a file).
jamonDataPersister=com.jamonapi.distributed.HazelcastFilePersister
#jamonDataPersister=com.jamonapi.distributed.LocalJamonDataPersister
#jamonDataPersister=com.jamonapi.distributed.LocalJamonFilePersister


# Override the normal default label/key used to identify the distributed jamon data.  For hazelcast this would be
# the hazelcast node name.   This name is not always easy to identify with an application name however.  An example
# label you might want to add is:  myappname_jetty_production
jamonDataPersister.label=

# The label prefix is put in front of either the default label or the label specified in jamonDataPersister.label.
# For example if the prefix was 'myappname_production - ', and HazelcastPersister was used then
# the label would be something like this:  myappname_production - Member [myhost.com:5701]
# The default is to have no prefix.
jamonDataPersister.label.prefix=

# Root directory where jamon Monitoring data will be serialized. This enables the data to be reloaded in the case
# of system failure or reboot.  Note that if HazelCast is still running the data will be taken from the hazelcast
# cluster first.  The default directory is 'jamondata' and is created under the 'current' directory
jamonDataPersister.directory=jamondata

# size,type, and name referenced below all have defaults so do not need to be provided.

# How many listeners (Starting at 1) can be added.  The default is 50. If you would like more just increase this number.
#   jamonListener.size=50
# Specify the type or location of the listener.  The default if not provided is 'value'
#   jamonListener.type=value
# Specify a default for the listener name type if it isn't provided.  The default if not provided is 'FIFOBuffer'
#   jamonListener.name=FIFOBuffer

# When different instances jamon data is aggregated this variable specifies how many servers the detail summary will hold before
# rolling over.
monitorCompositeCombiner.summaryFifoBufferSize=100

# Size for any BufferListeners that are to be combined from the various servers.
monitorCompositeCombiner.combinedFifoBufferSize=250

# Note com.jamonapi.Exception has a listener by default, so it need not be specified, but it is given as an example
# jamonListener[1].key=com.jamonapi.Exceptions, Exception
# defaults (FIFOBuffer, value) will be used for the following, however the commented out lines
#  show how they could be defined.
# jamonListener[1].name=FIFOBuffer
# jamonListener[1].type=value

# Uncomment these for better tracking of jetty or tomcat.
# jamonListener[2].key=com.jamonapi.http.JAMonJettyHandlerNew.request.allPages, ms.
# jamonListener[3].key=com.jamonapi.http.JAMonTomcatValve.request.allPages, ms.

# jamonJmxBean.size=50
# The following jamon jmx beans are enabled by default even when not specified in this file.
#  If one jamon jmx bean is enabled then these defaults will not be created and must be
#  explicitly created by uncommenting them from this file.  Note any jamon monitor can be turned
#  into a jmx monitor in this way.  They can all be viewed in jconsole, visualvm or any other
#  jmx tool.
#
#  Note the format below can be specified in several different ways:
#   label, units - The jmx bean can be identified with the label
#   label, units, name - The name alias is used instead of the label
#   label1, units1, label2, units2, name - The name alias will be used and the first monitor found will be used for the data.
#    for example label1, units1 will be checked and if it exists its data will be returned.  If it doesn't exist
#    then label2, units2 will be used etc.  This is useful to have one name even when a different monitor is checked.
#    An example below shows how this can be used to create a jmx bean called Jamon.HttpPageRequests that can use either
#    a jetty or tomcat monitor depending on which exists.  Note that the units of the monitors should be the same
#    (for example ms.).
jamonJmxBean[1].key=com.jamonapi.http.JAMonJettyHandlerNew.request.allPages, ms., com.jamonapi.http.JAMonTomcatValve.request.allPages, ms., Jamon.HttpPageRequests
jamonJmxBean[2].key=MonProxy-SQL-Type: All, ms., Jamon.Sql.All
jamonJmxBean[3].key=MonProxy-SQL-Type: select, ms., Jamon.Sql.Select
jamonJmxBean[4].key=MonProxy-SQL-Type: update, ms., Jamon.Sql.Update
jamonJmxBean[5].key=MonProxy-SQL-Type: delete, ms., Jamon.Sql.Delete
jamonJmxBean[6].key=MonProxy-SQL-Type: insert, ms., Jamon.Sql.Insert
